<%- contentFor('body') %>

  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold">建立平台項目</h1>
      <a href="/admin/platforms" class="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
        <i class="fas fa-arrow-left mr-2"></i> 返回列表
      </a>
    </div>

    <div class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
      <div class="mb-4">
        <form action="/admin/platforms" method="POST" enctype="multipart/form-data">
          <!-- Basic Information -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label class="block text-gray-700 text-sm font-bold mb-2" for="title_en">
                標題 (英文) <span class="text-red-500">*</span>
              </label>
              <input
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="title_en" name="title_en" type="text" required>
            </div>
            <div>
              <label class="block text-gray-700 text-sm font-bold mb-2" for="title_tw">
                標題 (繁體中文) <span class="text-red-500">*</span>
              </label>
              <input
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="title_tw" name="title_tw" type="text" required>
            </div>
          </div>

          <!-- Category and Type Selection -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label class="block text-gray-700 text-sm font-bold mb-2" for="categoryId">
                類別 <span class="text-red-500 category-required">*</span>
              </label>
              <select
                class="shadow border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="categoryId" name="categoryId" required>
                <option value="">選擇類別</option>
                <% categories.forEach(function(category) { %>
                  <option value="<%= category.id %>">
                    <%= category.name_en %> / <%= category.name_tw %>
                  </option>
                  <% }); %>
              </select>
            </div>
            <div>
              <label class="block text-gray-700 text-sm font-bold mb-2" for="type">
                內容類型 <span class="text-red-500">*</span>
              </label>
              <select
                class="shadow border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="type" name="type" required onchange="toggleContentFields()">
                <option value="plain_text">編輯器</option>
                <option value="image">圖片與說明</option>
                <option value="attachment_only">僅附件</option>
                <option value="partners">合作夥伴</option>
              </select>
            </div>
          </div>

          <!-- Content Fields -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <div class="content-field" id="content_en_field">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="editor_en">
                  內容 (英文) <span class="text-red-500 content-required">*</span>
                </label>
                <div id="editor_en" class="h-64 mt-1"></div>
                <input type="hidden" name="content_en" id="content_en">
              </div>
            </div>
            <div>
              <div class="content-field" id="content_tw_field">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="editor_tw">
                  內容 (繁體中文) <span class="text-red-500 content-required">*</span>
                </label>
                <div id="editor_tw" class="h-64 mt-1"></div>
                <input type="hidden" name="content_tw" id="content_tw">
              </div>
            </div>
          </div>

          <!-- Partners Fields (only visible for partners type) -->
          <div id="partners-fields-section" class="hidden">
            <div class="bg-blue-50 p-4 rounded-lg mb-6">
              <h3 class="text-xl font-bold mb-4 text-blue-800">供應商 (Suppliers)</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label class="block text-gray-700 text-sm font-bold mb-2" for="suppliers_en">
                    供應商列表 (英文)
                  </label>
                  <textarea
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    id="suppliers_en" name="suppliers_en" rows="5"></textarea>
                  <p class="text-gray-600 text-xs italic mt-1">每行輸入一個公司</p>
                </div>
                <div>
                  <label class="block text-gray-700 text-sm font-bold mb-2" for="suppliers_tw">
                    供應商列表 (繁體中文)
                  </label>
                  <textarea
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    id="suppliers_tw" name="suppliers_tw" rows="5"></textarea>
                  <p class="text-gray-600 text-xs italic mt-1">每行輸入一個公司</p>
                </div>
              </div>
            </div>

            <div class="bg-green-50 p-4 rounded-lg mb-6">
              <h3 class="text-xl font-bold mb-4 text-green-800">需求商 (Buyers)</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label class="block text-gray-700 text-sm font-bold mb-2" for="buyers_en">
                    需求商列表 (英文)
                  </label>
                  <textarea
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    id="buyers_en" name="buyers_en" rows="5"></textarea>
                  <p class="text-gray-600 text-xs italic mt-1">每行輸入一個公司</p>
                </div>
                <div>
                  <label class="block text-gray-700 text-sm font-bold mb-2" for="buyers_tw">
                    需求商列表 (繁體中文)
                  </label>
                  <textarea
                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    id="buyers_tw" name="buyers_tw" rows="5"></textarea>
                  <p class="text-gray-600 text-xs italic mt-1">每行輸入一個公司</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Partners Sub-Type Selection (only visible for partners type) -->
          <div id="partners-subtype-section" class="mb-4 hidden">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="partners_subtype">
              夥伴類型 <span class="text-red-500">*</span>
            </label>
            <select
              class="shadow border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="partners_subtype" name="partners_subtype">
              <option value="supplier">供應商 (Supplier)</option>
              <option value="buyer">需求商 (Buyer)</option>
            </select>
            <p class="text-gray-600 text-xs italic mt-1">選擇這些是供應商還是需求商</p>
          </div>

          <!-- Image Upload -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label class="block text-gray-700 text-sm font-bold mb-2" for="image">
                圖片
              </label>
              <input
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="image" name="image" type="file" accept="image/*">
              <p class="text-gray-600 text-xs italic mt-1">最大尺寸：<%= process.env.MAX_IMAGE_SIZE ?
                  (process.env.MAX_IMAGE_SIZE / (1024 * 1024)).toFixed(0) : 5 %>MB。支援格式：<%=
                    process.env.ALLOWED_IMAGE_TYPES ? process.env.ALLOWED_IMAGE_TYPES.toUpperCase()
                    : 'JPG, PNG, GIF, WebP' %>
              </p>
            </div>
            <div>
              <label class="block text-gray-700 text-sm font-bold mb-2" for="url">
                外部連結
              </label>
              <input
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="url" name="url" type="url">
              <p class="text-gray-600 text-xs italic mt-1">選填：連結到外部網站</p>
            </div>
          </div>

          <!-- Attachments -->
          <div id="attachments-section" class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2" for="attachments">
              附件 <span id="attachment-required" class="text-red-500 hidden">*</span>
            </label>
            <input
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              id="attachments" name="attachments" type="file" multiple>
            <p class="text-gray-600 text-xs italic mt-1">
              每個檔案最大尺寸：<%= process.env.MAX_ATTACHMENT_SIZE ? (process.env.MAX_ATTACHMENT_SIZE / (1024 *
                1024)).toFixed(0) : 50 %>MB。支援格式：<%= process.env.ALLOWED_ATTACHMENT_TYPES ?
                  process.env.ALLOWED_ATTACHMENT_TYPES.toUpperCase()
                  : 'PDF, DOC, DOCX, XLS, XLSX, PPT, PPTX, TXT, ZIP, RAR' %>
            </p>
          </div>

          <!-- Additional Settings -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div>
              <label class="block text-gray-700 text-sm font-bold mb-2" for="order">
                顯示順序
              </label>
              <input
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="order" name="order" type="number" value="0">
            </div>
            <div>
              <label class="block text-gray-700 text-sm font-bold mb-2" for="status">
                狀態 <span class="text-red-500">*</span>
              </label>
              <select
                class="shadow border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="status" name="status" required>
                <option value="draft">草稿</option>
                <option value="published">已發布</option>
              </select>
            </div>
            <div>
              <label class="block text-gray-700 text-sm font-bold mb-2" for="publishedDate">
                發布日期 <span class="text-red-500">*</span>
              </label>
              <input
                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                id="publishedDate" name="publishedDate" type="date" required>
            </div>
          </div>

          <div class="flex items-center justify-end">
            <button type="reset" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded mr-2">
              重置
            </button>
            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
              建立平台項目
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <%- contentFor('scripts') %>
    <script>
      function toggleContentFields() {
        const type = document.getElementById('type').value;
        console.log('Selected type:', type);

        const contentEnField = document.getElementById('content_en');
        const contentTwField = document.getElementById('content_tw');
        const editorEnContainer = document.getElementById('editor_en');
        const editorTwContainer = document.getElementById('editor_tw');
        const categoryField = document.getElementById('categoryId');
        const contentRequiredMarks = document.querySelectorAll('.content-required');
        const categoryRequiredMarks = document.querySelectorAll('.category-required');
        const attachmentsSection = document.getElementById('attachments-section');
        const attachmentRequired = document.getElementById('attachment-required');
        const partnersSubtypeSection = document.getElementById('partners-subtype-section');
        const partnersFieldsSection = document.getElementById('partners-fields-section');

        // Image and URL sections
        const imageUploadSection = document.getElementById('image-upload-section');
        const urlSection = document.getElementById('url-section');
        const contentFieldsSection = document.getElementById('content_en_field').parentNode.parentNode;

        console.log('Sections found:', {
          imageUploadSection: !!imageUploadSection,
          urlSection: !!urlSection,
          attachmentsSection: !!attachmentsSection,
          contentFieldsSection: !!contentFieldsSection
        });

        // Reset all sections to visible first
        if (imageUploadSection) imageUploadSection.style.display = 'grid';
        if (urlSection) urlSection.style.display = 'block';
        if (attachmentsSection) attachmentsSection.style.display = 'block';
        contentFieldsSection.style.display = 'grid';

        // Hide partners sections by default
        partnersSubtypeSection.classList.add('hidden');
        partnersFieldsSection.classList.add('hidden');

        if (type === 'image') {
          console.log('Handling image with caption type');
          // This is "image with caption" type
          // Make content fields optional
          contentEnField.required = false;
          contentTwField.required = false;
          categoryField.required = true;

          // Update content labels to show they're optional
          document.querySelector('label[for="editor_en"]').innerHTML = '內容 (英文)';
          document.querySelector('label[for="editor_tw"]').innerHTML = '內容 (繁體中文)';

          // Hide required marks for content
          contentRequiredMarks.forEach(mark => mark.style.display = 'none');
          categoryRequiredMarks.forEach(mark => mark.style.display = 'inline');

          // Make attachments optional
          document.getElementById('attachments').required = false;

          // Hide required mark for attachments and remove highlighting
          attachmentRequired.classList.add('hidden');
          attachmentsSection.classList.remove('border-2', 'border-blue-300', 'p-4', 'rounded-lg');

          // Remove the heading if it exists
          const heading = attachmentsSection.querySelector('h3');
          if (heading) {
            attachmentsSection.removeChild(heading);
          }

          // Hide attachments section
          attachmentsSection.style.display = 'none';
        }
        else if (type === 'attachment_only') {
          console.log('Handling attachment only type');
          // Hide content fields, image, and URL
          contentFieldsSection.style.display = 'none';
          if (imageUploadSection) imageUploadSection.style.display = 'none';
          if (urlSection) urlSection.style.display = 'none';

          // Make content fields not required
          contentEnField.required = false;
          contentTwField.required = false;
          categoryField.required = false;

          // Make attachments required
          document.getElementById('attachments').required = true;

          // Hide required marks for content and category
          contentRequiredMarks.forEach(mark => mark.style.display = 'none');
          categoryRequiredMarks.forEach(mark => mark.style.display = 'none');

          // Show required mark for attachments and highlight the section
          attachmentRequired.classList.remove('hidden');
          attachmentsSection.classList.add('border-2', 'border-blue-300', 'p-4', 'rounded-lg');

          // Add a heading to the attachments section
          const heading = document.createElement('h3');
          heading.className = 'text-xl font-bold mb-4 text-blue-600';
          heading.textContent = '附件 (必填)';

          // Insert the heading at the beginning of the section
          if (!attachmentsSection.querySelector('h3')) {
            attachmentsSection.insertBefore(heading, attachmentsSection.firstChild);
          }
        }
        else if (type === 'partners') {
          console.log('Handling partners type');
          // Hide content fields
          contentFieldsSection.style.display = 'none';

          // Make content fields not required
          contentEnField.required = false;
          contentTwField.required = false;
          categoryField.required = true;

          // Make attachments optional
          document.getElementById('attachments').required = false;

          // Hide required marks for content, show for category
          contentRequiredMarks.forEach(mark => mark.style.display = 'none');
          categoryRequiredMarks.forEach(mark => mark.style.display = 'inline');

          // Hide required mark for attachments and remove highlighting
          attachmentRequired.classList.add('hidden');
          attachmentsSection.classList.remove('border-2', 'border-blue-300', 'p-4', 'rounded-lg');

          // Remove the heading if it exists
          const heading = attachmentsSection.querySelector('h3');
          if (heading) {
            attachmentsSection.removeChild(heading);
          }

          // Show partners fields section
          partnersFieldsSection.classList.remove('hidden');
          partnersSubtypeSection.classList.remove('hidden');

          // Hide image, URL, and attachments sections
          if (imageUploadSection) imageUploadSection.style.display = 'none';
          if (urlSection) urlSection.style.display = 'none';
          attachmentsSection.style.display = 'none';
        }
        else if (type === 'plain_text') {
          console.log('Handling plain text type');
          // Make content fields required
          contentEnField.required = true;
          contentTwField.required = true;
          categoryField.required = true;

          // Make attachments optional
          document.getElementById('attachments').required = false;

          // Show required marks for content and category
          contentRequiredMarks.forEach(mark => mark.style.display = 'inline');
          categoryRequiredMarks.forEach(mark => mark.style.display = 'inline');

          // Hide required mark for attachments and remove highlighting
          attachmentRequired.classList.add('hidden');
          attachmentsSection.classList.remove('border-2', 'border-blue-300', 'p-4', 'rounded-lg');

          // Remove the heading if it exists
          const heading = attachmentsSection.querySelector('h3');
          if (heading) {
            attachmentsSection.removeChild(heading);
          }

          // Update content labels to show they're required
          document.querySelector('label[for="editor_en"]').innerHTML =
            '內容 (英文) <span class="text-red-500 content-required">*</span>';
          document.querySelector('label[for="editor_tw"]').innerHTML =
            '內容 (繁體中文) <span class="text-red-500 content-required">*</span>';

          // Hide attachments section for plain text type
          attachmentsSection.style.display = 'none';
        }

        console.log('Toggle complete');
      }

      // Set initial state
      document.addEventListener('DOMContentLoaded', function () {
        console.log('DOM loaded, initializing form controls');

        // Add IDs to sections for easier toggling
        const imageUploadRow = document.querySelector('input[name="image"]').closest('.grid');
        imageUploadRow.id = 'image-upload-section';
        console.log('Image upload section identified:', imageUploadRow);

        const urlField = document.querySelector('input[name="url"]');
        if (urlField) {
          urlField.closest('div').id = 'url-section';
          console.log('URL section identified:', urlField.closest('div'));
        }

        // Find attachments section
        const attachmentsSection = document.getElementById('attachments-section');
        if (!attachmentsSection) {
          const attachmentsInput = document.querySelector('input[name="attachments"]');
          if (attachmentsInput) {
            attachmentsInput.closest('.mb-4').id = 'attachments-section';
            console.log('Attachments section identified:', attachmentsInput.closest('.mb-4'));
          }
        }

        // Set up change event listener for type select
        document.getElementById('type').addEventListener('change', function () {
          console.log('Type changed to:', this.value);
          toggleContentFields();
        });

        // Add a small delay to ensure all elements are properly initialized
        setTimeout(toggleContentFields, 100);

        // Set default published date to today
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('publishedDate').value = today;
      });
    </script>

    <!-- Quill.js Editor Setup -->
    <script>
      // Include jQuery and Quill.js dynamically
      (function () {
        // Add jQuery
        var jquery = document.createElement('script');
        jquery.src = 'https://code.jquery.com/jquery-3.6.0.min.js';
        jquery.type = 'text/javascript';
        document.head.appendChild(jquery);

        // Add Quill.js after jQuery loads
        jquery.onload = function () {
          // Add Quill.js script
          var quillScript = document.createElement('script');
          quillScript.src = 'https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.js';
          quillScript.type = 'text/javascript';
          document.head.appendChild(quillScript);

          // Add Quill.js CSS
          var quillCss = document.createElement('link');
          quillCss.href = 'https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.snow.css';
          quillCss.rel = 'stylesheet';
          document.head.appendChild(quillCss);

          // Initialize Quill after script loads
          quillScript.onload = function () {
            // Initialize English editor with simple configuration
            var quill_en = new Quill('#editor_en', {
              theme: 'snow',
              modules: {
                toolbar: [
                  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                  ['bold', 'italic', 'underline', 'strike'],
                  [{ 'color': [] }, { 'background': [] }],
                  [{ 'align': [] }],
                  [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                  ['link', 'image', 'video'],
                  ['clean'],
                  ['code-block']
                ]
              },
              placeholder: 'Compose an epic...'
            });

            // Initialize Traditional Chinese editor with simple configuration
            var quill_tw = new Quill('#editor_tw', {
              theme: 'snow',
              modules: {
                toolbar: [
                  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                  ['bold', 'italic', 'underline', 'strike'],
                  [{ 'color': [] }, { 'background': [] }],
                  [{ 'align': [] }],
                  [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                  ['link', 'image', 'video'],
                  ['clean'],
                  ['code-block']
                ]
              },
              placeholder: '撰寫內容...'
            });

            // Function to truncate content if needed
            function truncateContent(content, maxLength) {
              // Use 100MB as the maximum length for LongText fields
              const MAX_LONGTEXT_LENGTH = 100 * 1024 * 1024; // 100MB

              // If maxLength is not provided, use the maximum LongText length
              const limit = maxLength || MAX_LONGTEXT_LENGTH;

              if (content && content.length > limit) {
                console.warn(`Content truncated from ${content.length} to ${limit} characters`);
                return content.substring(0, limit);
              }
              return content;
            }

            // Form validation before submit
            $('form').on('submit', function (e) {
              // Update hidden inputs with Quill content
              const type = $('#type').val();

              if (type === 'plain_text') {
                // For plain text, store the HTML content
                const htmlEn = quill_en.root.innerHTML;
                const htmlTw = quill_tw.root.innerHTML;

                // Using LongText field now, so we can store much more content
                $('#content_en').val(truncateContent(htmlEn));
                $('#content_tw').val(truncateContent(htmlTw));
              } else if (type === 'partners') {
                // For partners type, set empty content if not provided
                if (!$('#content_en').val()) {
                  $('#content_en').val(' ');
                }
                if (!$('#content_tw').val()) {
                  $('#content_tw').val(' ');
                }
              }

              return true;
            });

            // Add image handler for English editor
            const imageHandlerEn = () => {
              const input = document.createElement('input');
              input.setAttribute('type', 'file');
              input.setAttribute('accept', 'image/*');
              input.click();

              input.onchange = () => {
                const file = input.files[0];
                if (file) {
                  const reader = new FileReader();
                  reader.onload = () => {
                    const base64 = reader.result;
                    const range = quill_en.getSelection(true);
                    quill_en.insertEmbed(range.index, 'image', base64);
                  };
                  reader.readAsDataURL(file);
                }
              };
            };

            // Attach image handler to English editor toolbar
            quill_en.getModule('toolbar').addHandler('image', imageHandlerEn);

            // Add image handler for Traditional Chinese editor
            const imageHandlerTw = () => {
              const input = document.createElement('input');
              input.setAttribute('type', 'file');
              input.setAttribute('accept', 'image/*');
              input.click();

              input.onchange = () => {
                const file = input.files[0];
                if (file) {
                  const reader = new FileReader();
                  reader.onload = () => {
                    const base64 = reader.result;
                    const range = quill_tw.getSelection(true);
                    quill_tw.insertEmbed(range.index, 'image', base64);
                  };
                  reader.readAsDataURL(file);
                }
              };
            };

            // Attach image handler to Traditional Chinese editor toolbar
            quill_tw.getModule('toolbar').addHandler('image', imageHandlerTw);
          };
        };
      })();
    </script>

    <style>
      /* Custom styles for Quill editors */
      #editor_en,
      #editor_tw {
        height: 300px;
        margin-bottom: 30px;
      }

      /* Fix toolbar positioning */
      .ql-toolbar.ql-snow {
        border: 1px solid #ccc;
        box-sizing: border-box;
        font-family: 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
        padding: 8px;
      }

      .ql-container.ql-snow {
        border: 1px solid #ccc;
        border-top: 0px;
      }

      /* Ensure editor has proper height */
      .ql-editor {
        min-height: 200px;
      }
    </style>