<%- contentFor('head') %>
<!-- Include Quill.js (core only for rendering) -->
<link href="https://cdn.quilljs.com/1.3.6/quill.core.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>

<%- contentFor('body') %>

<div class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <h1 class="text-3xl font-bold mb-6">Frequently Asked Questions</h1>
        
        <% if (categories && categories.length > 0) { %>
            <div class="mb-8">
                <!-- Category Tabs -->
                <div class="border-b border-gray-200 mb-6">
                    <div class="flex flex-wrap -mb-px" id="faq-tabs">
                        <% categories.forEach(function(category, index) { %>
                            <button 
                                type="button"
                                class="category-tab mr-2 py-2 px-4 text-center border-b-2 <%= index === 0 ? 'border-blue-500 text-blue-600 font-medium' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300' %>"
                                data-category="<%= category.slug %>"
                            >
                                <%= category.name %>
                            </button>
                        <% }); %>
                    </div>
                </div>

                <!-- Category Content -->
                <% categories.forEach(function(category, index) { %>
                    <div id="<%= category.slug %>" class="category-content <%= index === 0 ? 'block' : 'hidden' %>">
                        <% if (category.description) { %>
                            <div class="mb-6 text-gray-600">
                                <%= category.description %>
                            </div>
                        <% } %>

                        <% if (category.faqItems && category.faqItems.length > 0) { %>
                            <div class="bg-white shadow-md rounded-lg overflow-hidden mb-6">
                                <% category.faqItems.forEach(function(item, itemIndex) { %>
                                    <div class="border-b border-gray-200 <%= itemIndex === category.faqItems.length - 1 ? 'border-b-0' : '' %>">
                                        <button 
                                            type="button"
                                            class="faq-question w-full flex justify-between items-center p-4 bg-white hover:bg-gray-50 focus:outline-none text-left"
                                        >
                                            <h3 class="text-lg font-medium text-gray-900"><%= item.title %></h3>
                                            <svg class="faq-arrow w-5 h-5 text-gray-500 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                            </svg>
                                        </button>
                                        <div class="faq-answer bg-gray-50 p-6 border-t border-gray-200 hidden">
                                            <div class="prose max-w-none quill-content" data-content="<%= encodeURIComponent(item.content) %>"></div>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <div class="bg-white shadow-md rounded-lg p-8 text-center text-gray-500">
                                No items found in this category.
                            </div>
                        <% } %>
                    </div>
                <% }); %>
            </div>
        <% } else { %>
            <div class="bg-white shadow-md rounded-lg p-8 text-center text-gray-500">
                No FAQ categories found.
            </div>
        <% } %>
    </div>
</div>

<style>
    /* Add prose styling for content */
    .prose {
        max-width: 65ch;
        color: #374151;
    }
    .prose p {
        margin-top: 1.25em;
        margin-bottom: 1.25em;
        line-height: 1.75;
    }
    .prose a {
        color: #2563eb;
        text-decoration: underline;
        font-weight: 500;
    }
    .prose strong {
        font-weight: 600;
        color: #111827;
    }
    .prose ul {
        margin-top: 1.25em;
        margin-bottom: 1.25em;
        padding-left: 1.625em;
        list-style-type: disc;
    }
    .prose ol {
        margin-top: 1.25em;
        margin-bottom: 1.25em;
        padding-left: 1.625em;
        list-style-type: decimal;
    }
    .prose h1 {
        margin-top: 0;
        margin-bottom: 0.8888889em;
        font-size: 2.25em;
        font-weight: 800;
        line-height: 1.1111111;
    }
    .prose h2 {
        margin-top: 2em;
        margin-bottom: 1em;
        font-size: 1.5em;
        font-weight: 700;
        line-height: 1.3333333;
    }
    .prose h3 {
        margin-top: 1.6em;
        margin-bottom: 0.6em;
        font-size: 1.25em;
        font-weight: 600;
        line-height: 1.6;
    }
    .prose img {
        margin-top: 2em;
        margin-bottom: 2em;
    }
    .prose blockquote {
        margin-top: 1.6em;
        margin-bottom: 1.6em;
        padding-left: 1em;
        border-left: 0.25em solid #e5e7eb;
        font-style: italic;
    }
    
    /* Quill specific styles */
    .ql-align-center {
        text-align: center;
    }
    .ql-align-right {
        text-align: right;
    }
    .ql-align-justify {
        text-align: justify;
    }
    .ql-indent-1 {
        padding-left: 3em;
    }
    .ql-indent-2 {
        padding-left: 6em;
    }
</style>

<%- contentFor('script') %>
<script>
    // Initialize Quill content rendering when the page loads
    document.addEventListener('DOMContentLoaded', function() {
        console.log('FAQ script loaded');
        
        // Function to switch between FAQ categories
        window.switchCategory = function(categoryId, clickedTab) {
            console.log('Switching to category:', categoryId);
            
            // Hide all category contents
            document.querySelectorAll('.category-content').forEach(content => {
                content.classList.add('hidden');
            });
            
            // Show the selected category content
            const selectedContent = document.getElementById(categoryId);
            if (selectedContent) {
                selectedContent.classList.remove('hidden');
            } else {
                console.error('Category content not found:', categoryId);
            }
            
            // Update tab styles
            document.querySelectorAll('.category-tab').forEach(tab => {
                tab.classList.remove('border-blue-500', 'text-blue-600', 'font-medium');
                tab.classList.add('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
            });
            
            // Highlight the clicked tab
            clickedTab.classList.add('border-blue-500', 'text-blue-600', 'font-medium');
            clickedTab.classList.remove('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
        };
        
        // Function to toggle FAQ item visibility
        window.toggleFaqItem = function(questionButton) {
            console.log('Toggling FAQ item');
            
            const answer = questionButton.nextElementSibling;
            const arrow = questionButton.querySelector('.faq-arrow');
            
            if (!answer || !arrow) {
                console.error('Answer or arrow element not found');
                return;
            }
            
            // Toggle answer visibility
            answer.classList.toggle('hidden');
            
            // Rotate arrow
            if (answer.classList.contains('hidden')) {
                arrow.classList.remove('rotate-180');
            } else {
                arrow.classList.add('rotate-180');
            }
        };
        
        // Add click event listeners to all FAQ questions
        document.querySelectorAll('.faq-question').forEach(question => {
            question.addEventListener('click', function() {
                toggleFaqItem(this);
            });
        });
        
        // Add click event listeners to all category tabs
        document.querySelectorAll('.category-tab').forEach(tab => {
            tab.addEventListener('click', function() {
                const categoryId = this.getAttribute('data-category');
                switchCategory(categoryId, this);
            });
        });
        
        // Render Quill content
        const quillContainers = document.querySelectorAll('.quill-content');
        console.log('Found Quill content containers:', quillContainers.length);
        
        if (quillContainers.length > 0) {
            quillContainers.forEach(container => {
                try {
                    const contentData = container.getAttribute('data-content');
                    if (contentData) {
                        // Decode the content
                        const decodedContent = decodeURIComponent(contentData);
                        console.log('Decoded content available');
                        
                        // Try to parse as Delta JSON
                        try {
                            const delta = JSON.parse(decodedContent);
                            if (delta && delta.ops) {
                                // Create a temporary div with Quill
                                const tempContainer = document.createElement('div');
                                const quill = new Quill(tempContainer);
                                quill.setContents(delta);
                                // Get the HTML and set it to our container
                                container.innerHTML = tempContainer.querySelector('.ql-editor').innerHTML;
                                console.log('Rendered Quill Delta content');
                            } else {
                                // Not a valid delta object
                                container.innerHTML = decodedContent;
                                console.log('Content is JSON but not a valid Delta, using as HTML');
                            }
                        } catch (e) {
                            console.warn('JSON parse error:', e);
                            // If not Delta JSON, just use as HTML
                            container.innerHTML = decodedContent;
                            console.log('Content is not JSON, using as HTML');
                        }
                    } else {
                        console.warn('No content data found for container');
                    }
                } catch (error) {
                    console.error('Error rendering Quill content:', error);
                    // Fallback to showing raw content
                    container.innerHTML = container.getAttribute('data-content') || 'Error displaying content';
                }
            });
        }
    });
</script>
