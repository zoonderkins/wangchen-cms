// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  articles  Article[]
  uploads   Media[]
  categoryPermissions CategoryPermission[]
  banners   Banner[]
  pages     Page[]
  faqItems  FaqItem[]
  downloads Download[]

  @@map("Users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  permissions Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]

  @@map("Roles")
}

model Article {
  id              Int       @id @default(autoincrement())
  title           String
  content         String    @db.LongText
  excerpt         String?   @db.Text
  status          Status    @default(draft)
  publishedAt     DateTime?
  metaTitle       String?
  metaDescription String?   @db.Text
  metaKeywords    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  // Relations
  author         User      @relation(fields: [authorId], references: [id])
  authorId       Int
  category       Category? @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  featured       Media?    @relation("FeaturedImage", fields: [featuredImage], references: [id])
  featuredImage  Int?
  media          Media[]   @relation("ArticleToMedia")

  @@map("articles")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?    @db.Text
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?

  // Relations
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  parentId    Int?
  children    Category[] @relation("CategoryToCategory")
  articles    Article[]
  permissions CategoryPermission[]

  @@map("Categories")
}

model Media {
  id           Int       @id @default(autoincrement())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  alt          String?
  caption      String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // Relations
  uploader           User      @relation(fields: [uploaderId], references: [id])
  uploaderId         Int
  featuredInArticles Article[] @relation("FeaturedImage")
  articles           Article[] @relation("ArticleToMedia")

  @@map("Media")
}

model CategoryPermission {
  id          Int      @id @default(autoincrement())
  canView     Boolean  @default(true)
  canCreate   Boolean  @default(false)
  canEdit     Boolean  @default(false)
  canDelete   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int

  @@unique([userId, categoryId])
  @@map("CategoryPermissions")
}

model Banner {
  id          Int      @id @default(autoincrement())
  title       String
  description String?  @db.Text
  url         String?
  mediaPath   String
  mediaType   String   // "image" or "video"
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [userId], references: [id])
  userId      Int

  @@map("Banners")
}

model Page {
  id              Int       @id @default(autoincrement())
  title           String
  slug            String    @unique
  content         String    @db.LongText
  editorMode      String    @default("editor") // "editor" or "html"
  status          Status    @default(draft)
  showInNavigation Boolean  @default(false)
  navigationOrder Int?
  metaTitle       String?
  metaDescription String?   @db.Text
  metaKeywords    String?
  publishedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  // Relations
  author         User      @relation(fields: [authorId], references: [id])
  authorId       Int
  attachments    PageAttachment[]

  @@map("Pages")
}

model PageAttachment {
  id           Int       @id @default(autoincrement())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  page         Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId       Int

  @@map("PageAttachments")
}

model FaqCategory {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?   @db.Text
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  faqItems    FaqItem[]

  @@map("FaqCategories")
}

model FaqItem {
  id          Int       @id @default(autoincrement())
  title       String
  content     String    @db.LongText
  order       Int       @default(0)
  status      Status    @default(draft)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  category    FaqCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  author      User        @relation(fields: [authorId], references: [id])
  authorId    Int

  @@map("FaqItems")
}

model Download {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?   @db.Text
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  status       Status    @default(draft)
  keywords     String?   @db.Text
  downloadCount Int      @default(0)
  category     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // Relations
  author      User      @relation(fields: [authorId], references: [id])
  authorId    Int

  @@map("Downloads")
}

enum Status {
  draft
  published
  archived
}
