// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  role      Role      @relation(fields: [roleId], references: [id])
  roleId    Int
  articles  Article[]
  uploads   Media[]
  categoryPermissions CategoryPermission[]

  @@map("Users")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  permissions Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]

  @@map("Roles")
}

model Article {
  id              Int       @id @default(autoincrement())
  title           String
  content         String    @db.LongText
  excerpt         String?   @db.Text
  status          Status    @default(draft)
  publishedAt     DateTime?
  metaTitle       String?
  metaDescription String?   @db.Text
  metaKeywords    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  // Relations
  author         User      @relation(fields: [authorId], references: [id])
  authorId       Int
  category       Category? @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  featured       Media?    @relation("FeaturedImage", fields: [featuredImage], references: [id])
  featuredImage  Int?
  media          Media[]   @relation("ArticleToMedia")

  @@map("articles")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?    @db.Text
  order       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?

  // Relations
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  parentId    Int?
  children    Category[] @relation("CategoryToCategory")
  articles    Article[]
  permissions CategoryPermission[]

  @@map("Categories")
}

model Media {
  id           Int       @id @default(autoincrement())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  alt          String?
  caption      String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // Relations
  uploader           User      @relation(fields: [uploaderId], references: [id])
  uploaderId         Int
  featuredInArticles Article[] @relation("FeaturedImage")
  articles           Article[] @relation("ArticleToMedia")

  @@map("Media")
}

model CategoryPermission {
  id          Int      @id @default(autoincrement())
  canView     Boolean  @default(true)
  canCreate   Boolean  @default(false)
  canEdit     Boolean  @default(false)
  canDelete   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int

  @@unique([userId, categoryId])
  @@map("CategoryPermissions")
}

enum Status {
  draft
  published
  archived
}
